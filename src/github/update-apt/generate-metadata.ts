#!/usr/bin/env node

import { readFileSync, writeFileSync } from 'node:fs';
import { downloadHashCache, getKVConfig, HashCache } from '../../shared';
import { calculateSHA256 } from '../utils';

/**
 * Extract proxy path from Proton download URL
 * Example: https://proton.me/download/mail/linux/1.9.1/ProtonMail-desktop-beta.deb
 *          -> proxy/download/mail/linux/1.9.1/ProtonMail-desktop-beta.deb
 */
function extractProxyPath(url: string): string {
  // Remove https://proton.me prefix
  const path = url.replace(PROTON_SERVER, '');
  return `proxy/${path}`;
}

function generatePackagesFile(hashCache: HashCache): string {
  let content = '';

  for (const hashEntry of hashCache) {
    // Map product to package name
    const packageName = hashEntry.product === 'mail' ? 'proton-mail' : 'proton-pass';
    const description =
      hashEntry.product === 'mail'
        ? 'Proton Mail - Secure and private email'
        : 'Proton Pass - Secure password manager';

    // Use proxy path: remove https://proton.me and prefix with proxy/
    const proxyPath = extractProxyPath(hashEntry.url);

    content += `Package: ${packageName}
Version: ${hashEntry.version}
Architecture: amd64
Maintainer: Proton AG <opensource@proton.me>
Filename: ${proxyPath}
Size: ${hashEntry.size}
SHA256: ${hashEntry.sha256}
Section: utils
Priority: optional
Homepage: https://proton.me/
Description: ${description}

`;
  }

  return content.trim();
}

function generateReleaseFile(packagesContent: string): string {
  const packagesHash = calculateSHA256(packagesContent);
  const packagesSize = Buffer.byteLength(packagesContent, 'utf8');

  // Generate architecture-specific Release content
  const archReleaseContent = `Archive: stable
Component: main
Origin: Proton Repository Proxy
Label: Proton Apps
Architecture: amd64
`;

  const archReleaseHash = calculateSHA256(archReleaseContent);
  const archReleaseSize = Buffer.byteLength(archReleaseContent, 'utf8');

  return `Origin: Proton Repository Proxy
Label: Proton Apps
Suite: stable
Codename: stable
Components: main
Architectures: amd64
Date: ${new Date().toUTCString()}
Description: Proxy repository for Proton applications
Acquire-By-Hash: no

SHA256:
 ${packagesHash} ${packagesSize} main/binary-amd64/Packages
 ${archReleaseHash} ${archReleaseSize} main/binary-amd64/Release
`;
}

function generateArchReleaseFile(): string {
  return `Archive: stable
Component: main
Origin: Proton Repository Proxy
Label: Proton Apps
Architecture: amd64
`;
}

function main(): void {
  console.log('üì¶ Generating APT repository metadata...');

  // Get KV config
  const { namespaceId } = getKVConfig();

  // Read hash data
  const packageData = await downloadHashCache(namespaceId);

  if (!packageData || Object.keys(packageData).length === 0) {
    console.error('‚ùå No package data found in hash cache');
    throw new Error('No package data found in hash cache');
  }

  // Generate APT files
  const packagesContent = generatePackagesFile(packageData);
  const releaseContent = generateReleaseFile(packagesContent);
  const archReleaseContent = generateArchReleaseFile();

  // Note: url-mapping.json is generated by calculate-links.ts (separate job)

  // Save files locally
  writeFileSync('packages-content.txt', packagesContent);
  writeFileSync('release-content.txt', releaseContent);
  writeFileSync('arch-release-content.txt', archReleaseContent);

  console.log('‚úÖ APT metadata generated successfully');
  console.log(`üìÑ Packages file: ${packagesContent.length} bytes`);
  console.log(`üìÑ Release file: ${releaseContent.length} bytes`);
  console.log(`üìÑ Arch Release file: ${archReleaseContent.length} bytes`);
}

main();
