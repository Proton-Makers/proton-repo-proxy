name: Update APT Repository Metadata

on:
  #  schedule:
  #    # Daily at 6 AM UTC (8 AM Paris)
  #    - cron: "0 6 * * *"
  workflow_dispatch:
    # Allow manual trigger
  push:
    paths:
      - ".github/workflows/update-metadata.yml"
      - "src/github/**"

env:
  NODE_VERSION: "20"

jobs:
  check-versions:
    runs-on: ubuntu-latest
    name: Check for new Proton versions
    # Only run on the original repository, not on forks
    if: github.repository == 'Proton-Makers/proton-repo-proxy'
    outputs:
      update_needed: ${{ steps.check.outputs.UPDATE_NEEDED }}
      updates_count: ${{ steps.check.outputs.UPDATES_COUNT }}
      mail_version: ${{ steps.check.outputs.MAIL_VERSION }}
      pass_version: ${{ steps.check.outputs.PASS_VERSION }}
      reasons: ${{ steps.check.outputs.REASONS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ‚úÖ Use official Cloudflare action for authentication
      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: whoami

      - name: Check for new Proton versions and cache status
        id: check
        run: npx tsx src/github/check-all-versions.ts
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Display check results
        run: |
          echo "üîç Check Results:"
          echo "üì¶ Proton Mail: ${{ steps.check.outputs.MAIL_VERSION }}"
          echo "üì¶ Proton Pass: ${{ steps.check.outputs.PASS_VERSION }}"
          echo "üîÑ Update needed: ${{ steps.check.outputs.UPDATE_NEEDED }}"
          if [ "${{ steps.check.outputs.UPDATE_NEEDED }}" == "true" ]; then
            echo "üìù Reasons: ${{ steps.check.outputs.REASONS }}"
          else
            echo "‚úÖ All products are up to date and all caches are complete"
          fi

  update-metadata:
    runs-on: ubuntu-latest
    name: Download packages and update metadata
    needs: check-versions
    if: needs.check-versions.outputs.update_needed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: whoami

      - name: Download and process packages
        run: |
          echo "üì• Processing updates"
          echo "üì¶ Proton Mail: ${{ needs.check-versions.outputs.mail_version }}"
          echo "üì¶ Proton Pass: ${{ needs.check-versions.outputs.pass_version }}"
          echo "ÔøΩ Reasons: ${{ needs.check-versions.outputs.reasons }}"
          mkdir -p /tmp/proton-packages
          cd /tmp/proton-packages

          # Download and hash all packages (with cache)
          npx tsx $GITHUB_WORKSPACE/src/github/download-and-hash-all.ts

          # Generate APT metadata for all packages
          npx tsx $GITHUB_WORKSPACE/src/github/generate-metadata.ts
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Upload to Cloudflare KV
        run: |
          npx tsx src/github/upload-metadata.ts "/tmp/proton-packages"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Summary
        run: |
          echo "üéâ Repository updated!"
          echo "üì¶ Proton Mail: ${{ needs.check-versions.outputs.mail_version }}"
          echo "üì¶ Proton Pass: ${{ needs.check-versions.outputs.pass_version }}"
          echo "üìä Updates: ${{ needs.check-versions.outputs.updates_count }} version change(s)"
          echo "üìù Reasons: ${{ needs.check-versions.outputs.reasons }}"
