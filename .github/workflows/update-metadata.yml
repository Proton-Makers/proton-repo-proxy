name: Update Repository Metadata

on:
  #  schedule:
  #    # Daily at 6 AM UTC (8 AM Paris)
  #    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      force_hashes:
        description: "Force hash recalculation"
        type: boolean
        default: false
      force_apt:
        description: "Force APT metadata regeneration"
        type: boolean
        default: false
  push:
    paths:
      - ".github/workflows/update-metadata.yml"
      - "src/github/**"

env:
  NODE_VERSION: "20"
  CACHE_PREFIX: "update-metadata"
  PROTON_CACHE_DIR: /tmp/proton-api-cache
  PROTON_CACHE_KEY: proton-files-${{ github.run_id }}
  APT_OUTPUT_DIR: /tmp/apt-metadata
  APT_CACHE_KEY: apt-metadata-${{ github.run_id }}

jobs:
  # ============================================================================
  # Phase 1: Parallel checks
  # ============================================================================

  check-proton-versions:
    runs-on: ubuntu-latest
    name: Check Proton versions
    if: github.repository == 'Proton-Makers/proton-repo-proxy'
    outputs:
      mail_version: ${{ steps.extract.outputs.MAIL_VERSION }}
      pass_version: ${{ steps.extract.outputs.PASS_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Ensure cache directory
        run: mkdir -p ${{ env.PROTON_CACHE_DIR }}

      - name: Download Proton API responses
        run: pnpm ci:check-proton-versions:download
        env:
          PROTON_CACHE_DIR: ${{ env.PROTON_CACHE_DIR }}

      - name: Validate API responses
        run: pnpm ci:check-proton-versions:validate
        env:
          PROTON_CACHE_DIR: ${{ env.PROTON_CACHE_DIR }}

      - name: Extract latest versions
        id: extract
        run: pnpm ci:check-proton-versions:versions
        env:
          PROTON_CACHE_DIR: ${{ env.PROTON_CACHE_DIR }}

      - name: Cache Proton API files
        id: cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.PROTON_CACHE_DIR }}
          key: ${{ env.PROTON_CACHE_KEY }}

      - name: Display results
        run: |
          echo "üîç Version Check Results:"
          echo "üì¶ Proton Mail: ${{ steps.extract.outputs.MAIL_VERSION }}"
          echo "üì¶ Proton Pass: ${{ steps.extract.outputs.PASS_VERSION }}"
          echo "üíæ API files cached: ${{ env.PROTON_CACHE_KEY }}"

  check-kv-caches:
    runs-on: ubuntu-latest
    name: Check KV caches
    if: github.repository == 'Proton-Makers/proton-repo-proxy'
    outputs:
      apt_mail_version: ${{ steps.check.outputs.apt_mail_version }}
      apt_pass_version: ${{ steps.check.outputs.pass_version }}
      hashes_missing: ${{ steps.check.outputs.hashes_missing }}
      reasons: ${{ steps.check.outputs.reasons }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: whoami

      - name: Check cache status
        id: check
        run: pnpm ci:check-kv-caches
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Display results
        run: |
          echo "üîç Cache Check Results:"
          echo "üì¶ APT Mail version: ${{ steps.check.outputs.apt_mail_version }}"
          echo "üì¶ APT Pass version: ${{ steps.check.outputs.apt_pass_version }}"
          echo "üî¢ Hashes missing: ${{ steps.check.outputs.hashes_missing }}"
          if [ -n "${{ steps.check.outputs.reasons }}" ]; then
            echo "üìù Reasons: ${{ steps.check.outputs.reasons }}"
          fi

  # ============================================================================
  # Phase 2: Update package hashes (if needed)
  # ============================================================================

  update-hashes:
    runs-on: ubuntu-latest
    name: Update package hashes
    needs: [check-proton-versions, check-kv-caches]
    if: |
      github.repository == 'Proton-Makers/proton-repo-proxy' &&
      (
        needs.check-proton-versions.outputs.mail_version != needs.check-kv-caches.outputs.apt_mail_version ||
        needs.check-proton-versions.outputs.pass_version != needs.check-kv-caches.outputs.apt_pass_version ||
        needs.check-kv-caches.outputs.hashes_missing == 'true' ||
        inputs.force_hashes == true
      )

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: whoami

      - name: Restore Proton API cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.PROTON_CACHE_DIR }}
          key: ${{ env.PROTON_CACHE_KEY }}

      - name: Download and hash packages
        run: pnpm ci:update-hashes
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROTON_CACHE_DIR: /tmp/proton-api-cache

      - name: Summary
        run: |
          echo "‚úÖ Package hashes updated"
          if [ -f /tmp/proton-packages/package-hashes.json ]; then
            echo "üìä Hash file size: $(du -h /tmp/proton-packages/package-hashes.json | cut -f1)"
          fi

  # ============================================================================
  # Phase 3: Update format-specific metadata (parallel)
  # ============================================================================

  update-apt:
    runs-on: ubuntu-latest
    name: Update APT metadata
    needs: [check-proton-versions, check-kv-caches, update-hashes]
    # Run after update-hashes succeeds, OR if forced
    if: |
      always() &&
      !cancelled() &&
      github.repository == 'Proton-Makers/proton-repo-proxy' &&
      (
        needs.update-hashes.result == 'success' ||
        needs.check-proton-versions.outputs.mail_version != needs.check-kv-caches.outputs.apt_mail_version ||
        needs.check-proton-versions.outputs.pass_version != needs.check-kv-caches.outputs.apt_pass_version ||
        inputs.force_apt == true
      )

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: whoami

      - name: Restore Proton API cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.PROTON_CACHE_DIR }}
          key: ${{ env.PROTON_CACHE_KEY }}

      - name: Ensure output directory
        run: mkdir -p ${{ env.APT_OUTPUT_DIR }}

      - name: Generate APT metadata
        run: pnpm ci:update-apt:generate
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROTON_CACHE_DIR: ${{ env.PROTON_CACHE_DIR }}
          APT_OUTPUT_DIR: ${{ env.APT_OUTPUT_DIR }}

      - name: Sign APT metadata with GPG
        run: pnpm ci:update-apt:sign
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          APT_OUTPUT_DIR: ${{ env.APT_OUTPUT_DIR }}

      - name: Cache APT metadata (for debugging)
        uses: actions/cache/save@v4
        with:
          path: ${{ env.APT_OUTPUT_DIR }}
          key: ${{ env.APT_CACHE_KEY }}

      - name: Verify APT metadata files
        run: |
          echo "üîç Verifying APT metadata files..."
          ls -lh ${{ env.APT_OUTPUT_DIR }}
          echo ""
          echo "üìÑ Packages file preview (first 20 lines):"
          head -n 20 ${{ env.APT_OUTPUT_DIR }}/Packages || echo "‚ö†Ô∏è  Packages file not found"
          echo ""
          echo "üìã Release file preview:"
          cat ${{ env.APT_OUTPUT_DIR }}/Release || echo "‚ö†Ô∏è  Release file not found"
          echo ""
          echo "üîê GPG-signed files:"
          [ -f "${{ env.APT_OUTPUT_DIR }}/InRelease" ] && echo "‚úÖ InRelease found" || echo "‚ö†Ô∏è  InRelease not found"
          [ -f "${{ env.APT_OUTPUT_DIR }}/Release.gpg" ] && echo "‚úÖ Release.gpg found" || echo "‚ö†Ô∏è  Release.gpg not found"
          [ -f "${{ env.APT_OUTPUT_DIR }}/public.gpg.key" ] && echo "‚úÖ public.gpg.key found" || echo "‚ö†Ô∏è  public.gpg.key not found"

      - name: Upload to Cloudflare KV
        run: pnpm ci:update-apt:upload "${{ env.APT_OUTPUT_DIR }}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Summary
        run: |
          echo "‚úÖ APT metadata updated"
          echo "üì¶ Proton Mail: ${{ needs.check-proton-versions.outputs.mail_version }}"
          echo "üì¶ Proton Pass: ${{ needs.check-proton-versions.outputs.pass_version }}"
          echo "üìÇ Output directory: ${{ env.APT_OUTPUT_DIR }}"
          echo "üíæ Cached as: ${{ env.APT_CACHE_KEY }}"

  # ============================================================================
  # Future: RPM support (commented structure for future implementation)
  # ============================================================================
