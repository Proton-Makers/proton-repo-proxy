name: Update APT Repository Metadata

on:
  schedule:
    # Daily at 6 AM UTC (8 AM Paris)
    - cron: "0 6 * * *"
  workflow_dispatch:
    # Allow manual trigger
  push:
    paths:
      - ".github/workflows/update-metadata.yml"
      - "src/github/**"

env:
  NODE_VERSION: "20"

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    name: Check for new Proton versions and update metadata

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # âœ… Use official Cloudflare action for authentication
      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: whoami

      # âœ… Use enhanced TypeScript script for version checking
      - name: Check for new Proton versions (Mail + Pass)
        id: check-versions
        run: npx tsx src/github/check-all-versions.ts
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # âœ… Enhanced package processing for all products
      - name: Download and process all packages
        if: steps.check-versions.outputs.UPDATE_NEEDED == 'true'
        run: |
          echo "ðŸ“¥ Processing updates for ${{ steps.check-versions.outputs.UPDATES_COUNT }} product(s)"
          echo "ðŸ“¦ Proton Mail: ${{ steps.check-versions.outputs.MAIL_VERSION }}"
          echo "ðŸ“¦ Proton Pass: ${{ steps.check-versions.outputs.PASS_VERSION }}"
          mkdir -p /tmp/proton-packages
          cd /tmp/proton-packages

          # Download and hash all packages (with cache)
          npx tsx $GITHUB_WORKSPACE/src/github/download-and-hash-all.ts

          # Generate APT metadata for all packages
          npx tsx $GITHUB_WORKSPACE/src/github/generate-metadata.ts

      # âœ… Use TypeScript script for KV upload
      - name: Upload to Cloudflare KV
        if: steps.check-versions.outputs.UPDATE_NEEDED == 'true'
        run: |
          npx tsx src/github/upload-to-kv.ts \
            "${{ steps.check-versions.outputs.MAIL_VERSION }}" \
            "/tmp/proton-packages"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check-versions.outputs.UPDATE_NEEDED }}" == "true" ]; then
            echo "ðŸŽ‰ Repository updated!"
            echo "ðŸ“¦ Proton Mail: ${{ steps.check-versions.outputs.MAIL_VERSION }}"
            echo "ï¿½ Proton Pass: ${{ steps.check-versions.outputs.PASS_VERSION }}"
            echo "ðŸ“Š Updates: ${{ steps.check-versions.outputs.UPDATES_COUNT }} product(s)"
          else
            echo "ðŸ˜´ No updates needed, all products are current"
            echo "ðŸ“¦ Proton Mail: ${{ steps.check-versions.outputs.MAIL_VERSION }}"
            echo "ðŸ“¦ Proton Pass: ${{ steps.check-versions.outputs.PASS_VERSION }}"
          fi
